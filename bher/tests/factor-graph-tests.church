(define samples 50)
(define runs 1)
(define error-tolerance 0.07)

(define check-test (make-check-test-with-runs runs))

;;;single node test
(check-test (lambda ()
              (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4)))))))
            (lambda (x) (if (equal? '((a 3 4)) x) 1 0))
            (- 1 (label-noise noise-params))
            error-tolerance
            "single node test")


;;;line test
(check-test (lambda ()
              (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4) (node '(b 5 10))))))))
            (lambda (x) (if (equal? '((a 3 4) ((b 5 10))) x) 1 0))
            (* (expt (- 1 (label-noise noise-params)) 2) (- 1 (growth-noise noise-params)))
            error-tolerance
            "line test")



;;;line that branches
(check-test (lambda ()
              (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4) (node '(b 5 10) (node '(b 5 10)) (node '(a 5 10)))))))))
            (lambda (x) (if (equal? '((a 3 4) ((b 5 10) ((c 5 10)) ((c 5 10)))) x) 1 0))
            (* (expt (- 1 (label-noise noise-params)) 4) (expt (- 1 (growth-noise noise-params)) 3))
            error-tolerance
            "line that branches test")


;; (forward-sample '(node 'a 3 4 (node 'b 5 10)))

