(define samples 100)
(define runs 1)
(define error-tolerance 0.07)

(define check-test (make-check-test-with-runs runs))

;;;single node test
;; (check-test (lambda ()
;;               (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4)))))))
;;             (lambda (x) (if (equal? '((a 3 4)) x) 1 0))
;;             (- 1 (label-noise noise-params))
;;             error-tolerance
;;             "single node test")


;; ;;;line test
;; (check-test (lambda ()
;;               (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4) (node '(b 5 10))))))))
;;             (lambda (x) (if (equal? '((a 3 4) ((b 5 10))) x) 1 0))
;;             (* (expt (- 1 (label-noise noise-params)) 2) (- 1 (growth-noise noise-params)))
;;             error-tolerance
;;             "line test")



;;;line that branches
;; (check-test (lambda ()
;;               (repeat (* 2 samples) (lambda () (lazy-list->all-list (eval '(node '(a 3 4) (node '(b 5 10) (node '(b 5 10)) (node '(a 5 10)))))))))
;;             (lambda (x) (if (equal? '((a 3 4) ((b 5 10) ((b 5 10)) ((a 5 10)))) x) 1 0))
;;             (* (expt (- 1 (label-noise noise-params)) 4) (expt (- 1 (growth-noise noise-params)) 3))
;;             error-tolerance
;;             "line that branches test")

;;;graph->program tests
(equal?-test "graph->program test" (graph->program '((a 3 4) ((b 5 10) ((c 20 20)) ((c 20 20))))) '(node '(a 3 4) (node '(b 5 10) (node '(c 20 20)) (node '(c 20 20)))))
;; (forward-sample '(node 'a 3 4 (node 'b 5 10)))

;; (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4))))))
;; (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4) (node '(b 5 10)))))))
;; (repeat samples (lambda () (lazy-list->all-list (eval '(node '(a 3 4) (node '(b 5 10) (node '(b 5 10)) (node '(a 5 10))))))))