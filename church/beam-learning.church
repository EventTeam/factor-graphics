(define alphabet (alist->hash-table '((a . 1) (b . 2) (c . 3) (d . 4) (e . 5))))
(define (alphabet-distance c1 c2)
  (let ([c1 (hash-table-ref alphabet c1)]
        [c2 (hash-table-ref alphabet c2)])
    (abs (- c1 c2))))
(define (threshold c1 c2)
  (< (alphabet-distance c1 c2) 2))
(define (alphabet? expr)
  (member expr (hash-table-keys alphabet)))
(define (make-replacement c1 c2)
  (list 'uniform-draw (list 'list c1 c2)))
(define similarity-replacement (make-similarity-transform alphabet-distance threshold alphabet? make-replacement))

(define transform-types (list compressions internalize-arguments similarity-replacement))

;;;searches through transformations of the sexpr (uniform-draw (list [observed data here])) , returns a thunk evaluates a uniforml draws over compressed forms of each observation, here data is a list of factor graphs
(define (learn-model data size-weight score-weight)
  (let* ([initial-sexpr (make-initial-sexpr data)]
         [learned-sexpr (beam-learn data initial-sexpr 5 size-weight score-weight)]
         [learned-sexpr (if (null? learned-sexpr) initial-sexpr learned-sexpr)]
         [model (lambda () (lazy-list->all-list ((eval learned-sexpr))))])
    (pretty-print (list "compressed-program:" learned-sexpr "size: " (size learned-sexpr)))    
    model))

;;;turns each of the examples into a program then wraps that in a uniform draw
(define (make-initial-sexpr data)
  (let* ([literal-sexprs (map graph->program data)])
    (list 'lambda '() (list 'uniform-draw (pair 'list literal-sexprs)))))

;;;returns an sexpr
(define (beam-learn data sexpr beam-size size-weight score-weight)
  (let* ([top-transformations 
          (sort-by-score-and-size
           (unique-programs
            (beam-learn-search-transformations data beam-size (make-program '() sexpr) size-weight score-weight)) data size-weight score-weight)])
    (if (null? top-transformations)
        sexpr
        (program->sexpr (first top-transformations)))))


(define (beam-learn-search-transformations data beam-size program size-weight score-weight)
  (my-iterated-transformations (lambda (progs) (best-n beam-size (unique-programs progs) data size-weight score-weight)) program))

(define (my-iterated-transformations cfilter program)
  (let* ([compressed-programs (cfilter (compressions program))])
    (append compressed-programs
            (apply append (map (lambda (prog) (my-iterated-transformations cfilter prog)) compressed-programs)))))

;;depth-iterated-transformations is only for testing purposes to check if my-iterated-transformations is correct
(define (depth-iterated-transformations cfilter program depth)
  (let* ([transformed-programs (if (= depth 0) '() (concatenate (map (lambda (transform-type) (cfilter (transform-type program #t))) transform-types)))])
    (delete '()  (append transformed-programs
             (apply append (map (lambda (prog) (depth-iterated-transformations cfilter prog (- depth 1))) transformed-programs))))))


(define (best-n n programs data size-weight score-weight)
  (max-take (sort-by-score-and-size programs data size-weight score-weight) n))


(define (sort-by-score-and-size programs data size-weight score-weight)
  (let* ([program-sizes (map (compose size program->sexpr) programs)]
         [program-scores (map (compose (lambda (prog) (scoring prog data 10)) program->sexpr) programs)]
         [total-weight (combine-size-score program-sizes program-scores size-weight score-weight)]
         [programs-with-weights (zip programs total-weight)]
         [weight< (lambda (a b) (< (second a) (second b)))])
    (map first (my-list-sort weight< programs-with-weights))))

;;;list sorting via something like quicksort
(define (my-list-sort compare lst)
  (if (null? lst)
      '()
      (let* ([pivot (first lst)]
             [lst (rest lst)]
             [lessthan+greaterthan (my-partition compare pivot lst)])
        (append (my-list-sort compare (first lessthan+greaterthan)) (pair pivot (my-list-sort compare (second lessthan+greaterthan)))))))

;;;returns a two item list where the first item is a list of all the elements where (compare item pivot) is true and the second is a list where the values are false
(define (my-partition compare pivot lst)
  (if (null? lst)
      (list '() '())
      (let* ([comparestrue+comparesfalse (my-partition compare pivot (rest lst))]
             [comparestrue (first comparestrue+comparesfalse)]
             [comparesfalse (second comparestrue+comparesfalse)]
             [current-item (first lst)])
        (if (compare current-item pivot)
            (list (pair current-item comparestrue) comparesfalse)
            (list comparestrue (pair current-item comparesfalse))))))
         

(define (combine-size-score sizes scores size-weight score-weight)
  (map +
       (map (lambda (x) (* x size-weight)) sizes)
       (map (lambda (x) (* (exp x) (- score-weight))) scores)))

(define (compose f g)
  (lambda (x) (f (g x))))


;;;computes the likelihood of the data given the prog, should never receive '() as a prog
;;here we assume prog is a thunk we can apply, should be much faster since we don't have to eval
(define score-fg-program 
   (lambda (sexpr data popsize)
     (let ([prog (eval sexpr)])
       (let* ([lazified-data (list->lazy-list data)]
              (samples (smc-core (map list (iota (+ 1 (lazy-list-size  lazified-data)))) popsize 0
                                 (lambda (depth) (lambda () (let ((s (prog)))
                                                              (pair (lazy-equal? s lazified-data depth)
                                                                    (lambda () (first (lazy-list->list s depth)))))))))
              ;;remove duplicates in order to do selective model averaging:
              ;;find symbol for repeat function and delete (temporary fix)
              (repeat-symbol (find-repeat-symbol samples))
              (samples (fold (lambda (s a) (if (member (mcmc-state->addrval s repeat-symbol) (map (lambda (x) (mcmc-state->addrval x repeat-symbol)) a)) a (pair s a))) '() samples))

              (scores (map mcmc-state->score samples))
              (score (if (null? scores)
                         -inf.0
                         (apply log-sum-exp scores))))
                                        ;(- (apply log-sum-exp scores) (log (length scores))))))
         score))))


;;temporary fix of addresses for same xrps not being the same; this is due to the way smc-core creates the particles
;;the fix works because factor graph programs only contain node expressions and function definition (no uses of repeat)
;;a more permanent fix would be to use the rejection-initializer that can be passed an explicit starting address
;;assumes argument is a list and there is only one address that repeats (if at all) across all xrps

;;need to address the fact that the address containing the repeated address only once will not delete 
(define (mcmc-state->addrval s repeated)
  (map (lambda (d)
         (pair (delete repeated (xrp-draw-address (rest d))) (xrp-draw-value (rest d)))) (mcmc-state->xrp-draws s)))


(define (find-repeat-symbol states)
  (if (null? states)
      '()
      (let ([repeat-symbol (find-repeat-symbol-in-state (map rest (mcmc-state->xrp-draws (first states))))])
        (if (null? repeat-symbol)
            (find-repeat-symbol (rest states))
            repeat-symbol))))

(define (find-repeat-symbol-in-state state-xrp-draws)
  (if (null? state-xrp-draws)
      '()
      (let* ([addr (xrp-draw-address (first state-xrp-draws))]
             [repeat-symbol (find-repeated addr)])
        (if (null? repeat-symbol)
            (find-repeat-symbol-in-state (rest state-xrp-draws))
            repeat-symbol))))

(define (find-repeated addr-lst)
  (if (more-than-one? addr-lst)
      (let ([current (first addr-lst)])
        (if (and (equal? current (second addr-lst)) (not (null? current)))
            current
            (find-repeated (rest addr-lst))))
      '()))

;;assumes argument is a list, move this to util.ss
(define (more-than-one? lst)
  (if (null? lst)
      #f
      (if (null? (rest lst))
              #f
              #t)))


;;;computes p(data|program)=\Pi_{fg\in data}p(fg|program) where data is a list of factor graphs
(define (scoring prog data popsize)
  (apply + (map (lambda (fg) (score-fg-program prog fg popsize)) data)))

;;;estimates p(images|program) ~= \frac{1}{R}\sum_{fg_r ~ p(fg|program)}p(images|fg) where R is the nubmer of samples
;;;this is the likelihood 
(define (scoring-fg-image prog sample-size)
  (let* ([none (set-policy! 'noisy-number)]
         [fg-sampler (eval prog)]
         [fg-samples (repeat sample-size (lambda () (lazy-list->all-list (fg-sampler))))]
         [likelihoods (map fg->img-score fg-samples)])
    (/ (apply + likelihoods) sample-size)))  ;;;if likelihoods are probabilities and not log probabilities


;;;estimates p(images|program) ~= \frac{1}{R}\sum_{fg_r ~ p(fg|fg_top)}p(images|fg)p(fg_top|prog) where R is the number of samples
;;;this is an importance sampler where the target distribution generates factor graphs based on topology extracted from the images

;; (define (topology-sampler data prog sample-size)
;;   (let* ([none (set-policy! 'topology-only)]
;;          [fg-top (imgs->fg_top data)]
;;          [fg+score-samples (repeat sample-size (lambda () (score+value-fg-program fgtop prog 10 )))])))