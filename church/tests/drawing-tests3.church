;;;aliases to make things more readable
;;;drawing tests
;;single part program
;;(define threep '(lambda ()
;;            (let ()
;;              (define (part1 straight)
;;                (node (data (radius .2) (blobbiness -0.2) (Distance 2 0.1) (Straightness straight 0.1))))
;;              (G1 (G2 (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part1 1) (part1 0) (part1 -1))))
;;              )))
;;(forward-sample threep)
;;
;;parameterized part
;;(define pp '(lambda ()
;;            (let ()
;;              (define (part1 size)
;;                (node (data (radius size) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))
;;              (define (part2 size straight)
;;                (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness straight 0.1)) (part1 size) (part1 size) (part1 size)))
;;              (G1 (G2 (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part2 0.8 1) (part2 0.5 0.5) (part2 .2 -0.5) (part2 0.6 -1)))))))
;;(forward-sample pp)
;;;;recursive
;;(define r '(lambda ()
;;            (let ()
;;              (define (part1 size)
;;                (if (flip)
;;                 (node (data (radius size) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0.5 0.1)))
;;                 (node (data (radius size) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0.5 0.1)) (part1 size))))
;;              (define (part2 size straight)
;;                (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness straight 0.1)) (part1 size)))
;;              (G1 (G2 (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part2 0.8 1) (part2 0.5 0.5) (part2 .2 -0.5) (part2 0.6 -1)))))))
;;(forward-sample r)
;;
;; new tree
(define tr '(lambda ()
              (let ()
                (define (node0)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))
                (define (node1 c1)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1))
                (define (node2 c1 c2)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2))
                (define (node3 c1 c2 c3)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2 c3))
                (define (left-leaf)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 1 0.1) (Straightness 0.5 0.1))))
                (define (right-leaf)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 1 0.1) (Straightness -0.5 0.1))))
                (define (mid-leaf)
                  (node (data (radius 0.1) (blobbiness -0.2) (Distance 1 0.1) (Straightness 0 0.1))))
                (define (leaves1)
                  (if (flip)
                    (node3 (left-leaf) (mid-leaf) (right-leaf))
                    (node2 (left-leaf) (right-leaf))))
                (define (tree)
                  (if (flip)
                    (node3 (leaves1) (tree) (leaves1))
                    (if (flip)
                      (node1 (tree))
                      (node0))))
                (G1 (G2 (node1 (tree)))))))
;;(forward-sample tr)

(define tr2 '(lambda ()
               (let ()
                 (define (node00)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness -0.5 0.1))))
                 (define (node01)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0.5 0.1))))
                 (define (node1 c1)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1))
                 (define (node2 c1 c2)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2))
                 (define (node3 c1 c2 c3)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2 c3))
                 (define (part x y)
                   (node3 x (node3 x (node3 x (node2 x y) y) y) y))
                 (G1 (G2 (part (node00) (node01)))))))
(forward-sample tr2)

