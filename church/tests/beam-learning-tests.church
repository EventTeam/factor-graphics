(load "../testing.church")
;;;score-fg|program tests
(define error-tolerance .07)
(define samples 1)
(define check-test (make-check-test-with-runs 1))

;;exact match
(check-test (lambda () (repeat samples (lambda () (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 10))))
            (lambda (x) (exp x))
            (- 1 (label-noise noise-params));;calculated by hand
            error-tolerance
            "p(fg|program), best program")
;;program w/ multiple possible derivations for the fg
;; (check-test (lambda () (repeat samples (lambda () (score-fg-program '(lambda () (if (flip) (node '(a 20 4)) (node '(b 20 4)))) '((a 20 4)) 30))))
;;             (lambda (x) (exp x))
;;             (+ (* .5 (- 1 (label-noise noise-params))) (* .5 (label-noise noise-params)));;calculated by hand
;;             error-tolerance
;;             "p(fg|program), program w/ multiple derivations")

;; ;;only check relative scores until selective model averaging is figured out
;; (check-test (lambda () (repeat samples (lambda () (> (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (if (flip) (node '(a 20 4)) (node '(b 20 4)))) '((a 20 4)) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "relative scoring test p(fg|program), multiple derivations program vs the best program")

;; (check-test (lambda () (repeat samples (lambda () (> (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (node '(b 20 4))) '((a 20 4)) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "relative scoring test p(fg|program), mislabeled node vs the best program")


;; (check-test (lambda () (repeat samples (lambda () (> (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (if (flip) (node '(a 20 4)) (node '(b 20 4)))) '((a 20 4)) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "single factor-graph check; one node fg, multiple derivations program vs the best program")

;; (check-test (lambda () (repeat samples (lambda () (> (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (node '(b 20 4))) '((a 20 4)) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "single factor-graph check; one node fg, mislabeled node vs the best program")

;; ;; ;;geometry differs slightly
;; ;; (set-policy! 'noisy-number)
;; (check-test (lambda () (repeat samples (lambda () (equal? (score-fg-program '(lambda () (node '(a 19 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "similar geometry test")

;; (check-test (lambda () (repeat samples (lambda () (not (equal? (score-fg-program '(lambda () (node '(a 10 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30))))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "non-similar geometry test")

;; ;;line test
;; (check-test (lambda () (repeat
;;                         samples
;;                         (lambda ()
;;                           (> (score-fg-program '(lambda () (node '(a 20 4) (node '(b 20 6))))
;;                                                     '((a 20 4) ((b 20 6))) 30)
;;                              (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4) ((b 20 6))) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "single factor-graph check; two node fg, two node program vs one node program")

;; ;; ;;line with branching
;; (check-test (lambda () (repeat
;;                         samples
;;                         (lambda ()
;;                           (= (score-fg-program
;;                               '(lambda () (if (flip)
;;                                              (node '(a 20 4) (node '(b 20 6) (node '(a 20 6)) (node '(a 20 6))))
;;                                              (node '(a 20 4) (node '(b 20 6) (node '(a 20 6)) (node '(a 20 6))))))
;;                                              '((a 20 4) ((b 20 6) ((a 20 6)) ((a 20 6)))) 100)
;;                              (score-fg-program
;;                               '(lambda () (node '(a 20 4) (node '(b 20 6) (node '(a 20 6)) (node '(a 20 6)))))
;;                               '((a 20 4) ((b 20 6) ((a 20 6)) ((a 20 6)))) 100)))))
;;                     (lambda (x) (if x 1 0))
;;                     1;;calculated by hand
;;                     error-tolerance
;;                     "single factor-graph check; line with branching fg, two programs that perform the same different derviation")

;; ;;;scoring tests
;; (set-growth-noise! .2)
;; (set-label-noise! .2)

;; (check-test (lambda () (repeat samples (lambda () (> (scoring '(lambda () (node '(a 20 4))) '(((a 20 4)) ((a 20 4)) ((a 20 4))) 30) (scoring '(lambda () (if (flip) (node '(a 20 4)) (node '(b 20 4)))) '(((a 20 4)) ((a 20 4)) ((a 20 4))) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "scoring test")


;; ;; ;;;list-sorting tests 
;; ;; ;; ;;partition test
;; ;; ;; (define test-list '(1 2 3 5 6 7))
;; ;; ;; (equal?-test "split with 4" (my-partition < 4 test-list) '((1 2 3) (5 6 7)))
;; ;; ;; ;;my-list-sort test
;; ;; ;; (equal?-test "sorting test" (my-list-sort > test-list) (reverse test-list))
;; ;; ;;;combine-size-score test
;; ;; ;; (define sizes '(1 2 3))
;; ;; ;; (define scores '(-10 -20 -30))

;; ;; ;; (equal?-test "combine-size-score test" (combine-size-score sizes scores 1 .1) '(2.0 4.0 6.0))
;; ;;;sort-by-score-and-size
;; (define timed-sort-by-score-and-size (time-it sort-by-score-and-size "sort-by-score-and-size"))
;; (let* ([sexprs (list '(lambda () (uniform-draw (list (node '(a 3 2)) (node '(b 1 2))))) '(lambda () (node '(a 1 2))))]
;;        [possible-programs (map (lambda (p) (make-program '() p)) sexprs)]
;;        [simplest-data '(((a 1 2)) ((a 1 2)))])
;;   (equal?-test "sort-by-score-and-size" (timed-sort-by-score-and-size possible-programs simplest-data 0 1) (reverse possible-programs)))



;; ;;;best-n tests
;; (define timed-best-n (time-it best-n "best-n"))
;; (let* ([sexprs (list '(lambda () (uniform-draw (list (node '(a 1 2))))) '(lambda () (uniform-draw (list (node '(a 1 2)) (node '(b 1 2))))))]
;;        [possible-programs (map (lambda (p) (make-program '() p)) sexprs)]
;;        [simplest-data '(((a 1 2)) ((a 1 2)))])
;;   (equal?-test "best-n by score only" (timed-best-n 1 possible-programs simplest-data 0 1) (list (make-program '() '(lambda () (uniform-draw (list (node '(a 1 2)))))))))

;; ;; ;;;church-iterated-compressions test
;; (define timed-iterated-compressions (time-it my-iterated-compressions "my-iterated-compressions"))
;; (let ([compressible-program (make-program '() '(lambda () (uniform-draw (list (node '('a 1 2)) (node '('a 1 2))))))])
;;   (evaluates?-test "my-iterated-compressions test" (timed-iterated-compressions (lambda (x) x) compressible-program)))

;; ;;;beam-learn-search-compressions test
;; (define timed-beam-learn-search-compressions (time-it beam-learn-search-compressions "beam-learn-search"))

;; (let ([simplest-program (make-program '() '(lambda () (uniform-draw (list (node '(a 1 2))))))]
;;       [simplest-data '(((a 1 2)) ((a 1 2)))])
;;   (evaluates?-test "beam-learn-search-compressions simplest program" (timed-beam-learn-search-compressions simplest-data 10 simplest-program 0 1)))

;; (let ([compressible-program (make-program '() '(lambda () (uniform-draw (list (node '('a 1 2)) (node '('a 1 2))))))]
;;       [simplest-data '((('a 1 2)) (('a 1 2)))])
;;   (evaluates?-test "beam-learn-search-compressions simple compressible program" (timed-beam-learn-search-compressions simplest-data 10 compressible-program 0 1)))



;; ;;;beam-learn test
;; ;;beam learn takes a list of factors graphs as data and an sexpr
;; (evaluates?-test "beam-learn runs" (beam-learn '(((a 1 2)) ((a 1 2))) (make-initial-sexpr '(((a 1 2)) ((a 1 2)))) 5  0 1))
;; (member?-test (lazy-list->all-list ((eval (beam-learn '(((a 1 2)) ((a 1 2))) (make-initial-sexpr '(((a 1 2)) ((a 1 2)))) 5  0 1)))) '(((a 1 2)) ((b 1 2))))
;; ;;;make-initial-sexpr test, this is a program that returns lazy factor graphs
;; (equal?-test "initial-sexpr test sexpr" (make-initial-sexpr '(((a 1 2)) ((a 1 2)))) '(lambda () (uniform-draw (list (node (a 1 2)) (node (a 1 2))))))

;; (equal?-test "initial sexpr evalutes to lazy-pair" (lazy-pair? ((eval (make-initial-sexpr '(((a 1 2)) ((a 1 2))))))) #t)

;; (member?-test "initial sexpr evalutes correctly" (lazy-list->all-list ((eval (make-initial-sexpr '(((a 1 2)) ((a 1 2))))))) '(((a 1 2)) ((b 1 2))))


;; ;;;learn-model tests
;; ;;type check, learn-model should process a list of factor-graphs and return a function that generates factor graphs
;; (define timed-learn-model (time-it learn-model))
;; (member?-test "learned-model" ((timed-learn-model '(((a 1 2)) ((a 1 2))) 0 1)) '(((a 1 2)) ((b 1 2))))



(pretty-print (eval '(+ 2 2)))




