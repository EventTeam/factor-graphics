(load "../testing.church")
;;;test parameters
(define error-tolerance .07)
(define samples 1)
(define check-test (make-check-test-with-runs 1))
(define (almost= a b)
  (< (abs (- b a)) error-tolerance))
;;;score-fg-image test
;; (evaluates?-test "score-fg-image" (scoring-fg-image '(lambda () (node '(a 20 4))) 20))

;; ;;;score-fg|program tests
;; ;;;exact match
;; (check-test (lambda () (repeat samples (lambda () (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 10))))
;;             (lambda (x) (exp x))
;;             (- 1 (label-noise noise-params));;calculated by hand
;;             error-tolerance
;;             "p(fg|program), single node")
;; ;;;program w/ multiple possible derivations for the fg
;; (check-test (lambda () (repeat samples (lambda () (score-fg-program '(lambda () (if (flip) (node '(a 20 4)) (node '(b 20 4)))) '((a 20 4)) 30))))
;;              (lambda (x) (exp x))
;;              (+ (* .5 (- 1 (label-noise noise-params))) (* .5 (label-noise noise-params)));;calculated by hand
;;              (+ error-tolerance .03) ;;since it's probable to only get the high probability path and thus .4 probability
;;              "p(fg|program), single node w/ multiple derivations")
;; ;;;multiple node test
;; (check-test (lambda () (repeat
;;                         samples
;;                         (lambda ()
;;                           (score-fg-program '(lambda () (node '(a 20 4) (node '(b 20 6))))
;;                                                     '((a 20 4) ((a 20 6))) 100))))
;;             (lambda (x) (exp x))
;;             (* (- 1 (label-noise noise-params)) (label-noise noise-params) (- 1 (growth-noise noise-params))) ;;calculated by hand
;;             error-tolerance
;;             "p(fg|program); two node")


;; ;; ;;;geometry differs slightly
;; (check-test (lambda () (repeat samples (lambda () (equal? (score-fg-program '(lambda () (node '(a 19 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30)))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "similar geometry test")

;; (check-test (lambda () (repeat samples (lambda () (not (equal? (score-fg-program '(lambda () (node '(a 10 4))) '((a 20 4)) 30) (score-fg-program '(lambda () (node '(a 20 4))) '((a 20 4)) 30))))))
;;             (lambda (x) (if x 1 0))
;;             1;;calculated by hand
;;             error-tolerance
;;             "non-similar geometry test")



;; ;;;scoring test
;; (check-test (lambda () (repeat samples (lambda () (scoring '(lambda () (node '(a 20 4))) '(((a 20 4)) ((a 20 4)) ((a 20 4))) 30))))
;;             (lambda (x) (exp x))
;;             (expt (- 1 (label-noise noise-params)) 3)
;;             error-tolerance
;;             "scoring test")


;; ;;;list-sorting tests 
;; ;;partition test
;; (define test-list '(1 2 3 5 6 7))
;; (equal?-test "split with 4" (my-partition < 4 test-list) '((1 2 3) (5 6 7)))
;; ;;my-list-sort test
;; (equal?-test "sorting test" (my-list-sort > test-list) (reverse test-list))
;; ;;;combine-size-score test
;; (equal?-test "combine-size-score test" (map round (combine-size-score '(1 2 3) (list (log 10) (log 20) (log 30)) 1 1))  '(-9. -18. -27.))



;;;church-iterated-compressions test
;;recursion test






;;;topology scoring test
;;in the original policy all numbers treated w/ strict equality

;; (let* ([init-py-fg '(GN2 
;;                      (GN1
;;                       (N2 (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                           (N1 (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1))))))]
;;        [scheme-prog (python-format->scheme-program init-py-fg)])
;;   (equal?-test "score-fg-program test with new fg format"
;;                (exp (score-fg-program scheme-prog '(((((1) (-0.2) (2 0.1) (0 0.1))
;;                                                   (((0.8) (-0.1) (3 0.1) (0 0.1)))))) 10))
;;                0.0))
;; ;;for noisy-number the geometry has a threshold for comparison
;; (let* ([init-py-fg '(GN2 
;;                      (GN1
;;                       (N2 (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                           (N1 (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1))))))]
;;        [scheme-prog (python-format->scheme-program init-py-fg)])
;;   (equal?-test "score-fg-program test with new fg format"
;;                (exp (score-fg-program scheme-prog '(((((1) (-0.2) (2 0.1) (0 0.1))
;;                                                   (((0.8) (-0.1) (3 0.1) (0 0.1)))))) 10))
;;                1.0))

;;for topology-only the geometry has no effect on matching

;; (let* ([init-py-fg '(GN2 
;;                      (GN1
;;                       (N2 (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                           (N1 (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1))))))]
;;        [scheme-prog (python-format->scheme-program init-py-fg)])
;;   (equal?-test "score-fg-program test with new fg format"
;;                (exp (score-fg-program scheme-prog '(((((0) (0) (0 0) (0 0))
;;                                                   (((0) (0) (0 0) (0 0)))))) 10))
;;                1.0))

;; (let* ([init-py-fg '(GN2 
;;                      (GN1
;;                       (N2 (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)))))]
;;        [scheme-prog (python-format->scheme-program init-py-fg)])
;;   (equal?-test "score-fg-program test with new fg format"
;;                (exp (score-fg-program scheme-prog '(((((0) (0) (0 0) (0 0))
;;                                                   (((0) (0) (0 0) (0 0)))))) 10))
;;                0.0))

;;lazy-data check


;; (let* ([single-node-program (python-format->scheme-program '(GN 
;;                                                         (GN
;;                                                          (N (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))))]
;;        [double-node-program1 (python-format->scheme-program '(GN 
;;                                                               (GN
;;                                                                (N (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                                                                    (N (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1)))))))]
;;        [double-node-program2 (python-format->scheme-program '(GN 
;;                                                               (GN
;;                                                                (N (data (radius 1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                                                                    (N (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1)))))))]
;;        [program (list 'lambda '() (list (list 'uniform-draw (list 'list single-node-program double-node-program1 double-node-program2))))])
;;   (equal?-test "score-fg-program w/ program that can produce different topologies"
;;                (exp (score-fg-program program '((((data (0) (0) (0 0) (0 0))
;;                                                   ((data (0 0) (0) (0 0) (0 0)))))) 10))
;;                (/ 2.0 3)))

;; (let* ([single-node-program (python-format->scheme-program '(GN 
;;                                                         (GN
;;                                                          (N (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))))]
;;        [double-node-program1 (python-format->scheme-program '(GN 
;;                                                               (GN
;;                                                                (N (data (radius 1.2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                                                                    (N (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1)))))))]
;;        [double-node-program2 (python-format->scheme-program '(GN 
;;                                                               (GN
;;                                                                (N (data (radius 1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))
;;                                                                    (N (data (radius 0.8) (blobbiness -0.1) (Distance 3 0.1) (Straightness 0 0.1)))))))]
;;        [program (list 'lambda '() (list (list 'uniform-draw (list 'list single-node-program double-node-program1 double-node-program2))))])
;;   (equal?-test "score-fg-program w/ program that can produce different topologies"
;;                (exp (score-fg-program program '((((data (0) (0) (0 0) (0 0))
;;                                                   ))) 10))
;;                (/ 1.0 3)))



;;;init-images tests
;;(equal?-test "init-images test" (init-images) )

(define (init-images) (list "fg.png"))
(define fg '(N (data (label 1) (radius 10) (blobbiness 3.5) (Distance 5 .5) (Straightness 0 0.1))
              (N (data (label 2) (radius 5) (blobbiness 3.5) (Distance 3 .5) (Straightness 0 0.1))
                 (N (data (label 3) (radius 2) (blobbiness 3.5) (Distance 2 .5) (Straightness 0 0.1))
                    (N (data (label 4) (radius 5) (blobbiness 10) (Distance 5 .5) (Straightness 0 0.1)))
                    (N (data (label 5) (radius 5) (blobbiness 10) (Distance 5 .5) (Straightness 0 0.1)))))))
(define images (init-images))
(equal?-test "image->factor-graph test"
             (image->factor-graph (first images))
             fg)
;;;make-initial-sexpr test, this is a program that returns lazy factor graphs
(equal?-test "initial-sexpr test sexpr" (make-initial-sexpr images) (list 'lambda '() (list (list 'uniform-draw  (list 'list (list 'lambda '() fg))))))

;;(pretty-print ((eval (make-initial-sexpr images))))
(equal?-test "initial sexpr evalutes to lazy-pair" (lazy-pair? ((eval (make-initial-sexpr images)))) #t)

(equal?-test "initial sexpr evalutes correctly" (lazy-list->all-list ((eval (make-initial-sexpr images)))) '(((1) (10) (3.5) (5 .5) (0 0.1)) (((2) (5) (3.5) (3 .5) (0 0.1)) (((3) (2) (3.5) (2 .5) (0 0.1)) (((4) (5) (10) (5 .5) (0 0.1)) ) (((5) (5) (10) (5 .5) (0 0.1)))))))




;;;depth-iterated-compressions
(define timed-iterated-transformations (time-it depth-iterated-transformations "depth-iterated-transformations"))
(let* ([abstraction1 (make-named-abstraction 'F1 '(node V1) '(V1))]
       [program1 (make-program (list abstraction1) '(F1 (F1 1)))]
       [abstraction21 (make-named-abstraction 'F2 '(V2 V3) '(V2 V3))]
       [abstraction22 (make-named-abstraction 'F1 '(F2 node V1) '(V1))]
       [program2 (make-program (list abstraction21 abstraction22) '(F2 F1 (F2 F1 1)))]
       [abstraction3 (make-named-abstraction 'F2 '(V2 (F1 V3)) '(V2 V3))]
       [program3 (make-program (list abstraction3 abstraction1) '(F2 F1 1))]
       [abstraction4 (make-named-abstraction 'F2 '(F1 V2) '(V2))]
       [program4 (make-program (list abstraction4 abstraction1) '(F2 (F2 1)))]
       [abstraction5 (make-named-abstraction 'F1 '(let ([V1 ((uniform-draw (list (lambda () (F1)) (lambda () 1))))]) (node V1)) '())]
       [program5 (make-program (list abstraction5) '(F1))])
  (equal?-test "depth-iterated-transformations internalize-argument test"
               (timed-iterated-transformations (lambda (x) x) (make-program '() '(node (node 1))) 2)
               (list program1 program2 program3 program4 program5)))


;;;sort-by-score-and-size
(define timed-sort-by-score-and-size (time-it sort-by-score-and-size "sort-by-score-and-size"))
(let* ([sexprs (list '(lambda () (uniform-draw (list (node '(a 1 2)) (node '(a 1 2))))) '(lambda () (node '(b 1 2))))]
       [possible-programs (map (lambda (p) (make-program '() p)) sexprs)]
       [simplest-data '(((a 1 2)) ((a 1 2)))])
  (equal?-test "sort-by-score-and-size size-only" (timed-sort-by-score-and-size possible-programs simplest-data 1 0) (reverse possible-programs)))

(let* ([sexprs (list '(lambda () (uniform-draw (list (node '(a 1 2)) (node '(a 1 2))))) '(lambda () (node '(b 1 2))))]
       [possible-programs (map (lambda (p) (make-program '() p)) sexprs)]
       [simplest-data '(((a 1 2)) ((a 1 2)))])
  (equal?-test "sort-by-score-and-size score-only" (timed-sort-by-score-and-size possible-programs simplest-data 0 1) possible-programs))



;;;best-n tests
(define timed-best-n (time-it best-n "best-n"))
(let* ([non-fg-program (list 'lambda '() (N (data (label 4) (radius 5) (blobbiness 10) (Distance 5 .5) (Straightness 0 0.1))))]
       [sexprs (list (make-initial-sexpr images) (list 'lambda '() (list (list 'uniform-draw  (list 'list (list 'lambda '() fg) non-fg-program)))))]
       [possible-programs (map (lambda (p) (make-program '() p)) sexprs)])
  (equal?-test "best-n by score only" (timed-best-n images possible-programs 1) (make-initial-sexpr images)))


;;;beam-learn-search-compressions test
;; (define timed-beam-learn-search-transformations (time-it beam-learn-search-transformations "beam-learn-search"))


;; (evaluates?-test "beam-learn-search-compressions simple compressible program" (timed-beam-learn-search-transformations images (make-initial-sexpr images) 1 2))




;; ;;;beam-learn test
;; ;;beam learn takes a list of factors graphs as data and an sexpr
;; (evaluates?-test "beam-learn runs" (beam-learn images (make-initial-sexpr images) 1 2))


;; ;;;learn-model tests
;; ;;type check, learn-model should process a list of factor-graphs and return a function that generates factor graphs
;; (define timed-learn-model (time-it learn-model))
;; (evaluates?-test "learned-model" ((timed-learn-model images 1 2)))


(exit)