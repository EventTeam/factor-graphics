;;(define tr2 '(lambda ()
;;               (let ()
;;                 (define (node00)
;;                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness -0.5 0.1))))
;;                 (define (node01)
;;                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0.5 0.1))))
;;                 (define (node1 c1)
;;                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1))
;;                 (define (node2 c1 c2)
;;                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2))
;;                 (define (node3 c1 c2 c3)
;;                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2 c3))
;;                 (define (part x y)
;;                   (node3 x (node3 x (node3 x (node2 x y) y) y) y))
;;                 (G1 (G2 (part (node00) (node01)))))))
;;(forward-sample tr2)


(define tr_rec '(lambda ()
               (let ()
                 (define (node00)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness -0.5 0.1))))
                 (define (node01)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0.5 0.1))))
                 (define (node1 c1)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1))
                 (define (node2 c1 c2)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2))
                 (define (node3 c1 c2 c3)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2 c3))
                 (define (part x y)
                   (node3 x  
                                            (if (flip)
                                             (node2 x y)
                                             (part x y)
                                             ) y))
                 (G1 (G2 (part (node00) (node01)))))))
(forward-sample tr_rec)

(define tr_lr '(lambda ()
               (let ()
                 (define (nodestraight)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))
                 (define (node00)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness -0.5 0.1))))
                 (define (node01)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0.5 0.1))))
                 (define (node1 c1)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1))
                 (define (node2 c1 c2)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2))
                 (define (node3 c1 c2 c3)
                   (node (data (radius 0.1) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) c1 c2 c3))
                 (define (part x y)
                   (node2 x (node2 y (node2 x (node2 y (nodestraight))))))
                 (G1 (G2 (part (node00) (node01)))))))
(forward-sample tr_lr)
