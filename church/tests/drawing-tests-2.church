;;;aliases to make things more readable
;;;drawing tests
;;single part program
(define p '(lambda ()
            (let ()
              (define (part1)
                (node (data (radius .2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))
              (G1 (G2 (part1)))
              )))

(forward-sample p)

(define threep '(lambda ()
            (let ()
              (define (part1)
                (node (data (radius .2) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))
              (G1 (G2 (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part1) (part1) (part1))))
              )))
(forward-sample threep)

;;parameterized part
(define pp '(lambda ()
            (let ()
              (define (part1 size)
                (node (data (radius size) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1))))
              (define (part2 size)
                (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part1 size) (part1 size) (part1 size)))
              (G1 (G2 (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part2 3) (part2 1) (part2 .1) (part2 2)))))))
(forward-sample pp)
;;recursive
(define r '(lambda ()
            (let ()
              (define (part1 size)
                (if (flip)
                 (node (data (radius size) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)))
                 (node (data (radius size) (blobbiness -0.2) (Distance 2 0.1) (Straightness 0 0.1)) (part1 size))))
              (define (part2 size)
                (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part1 size) (part1 size) (part1 size)))
              (G1 (G2 (node (data (radius .7) (blobbiness 0) (Distance 2 0.1) (Straightness 0 0.1)) (part2 3) (part2 1) (part2 .1) (part2 2)))))))
(forward-sample r)

